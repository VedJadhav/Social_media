{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["API_URL","App","posts","setPosts","useState","newPost","setNewPost","user","content","commentTexts","setCommentTexts","useEffect","fetchPosts","async","response","axios","get","data","error","console","alert","React","createElement","style","padding","maxWidth","margin","onSubmit","e","preventDefault","post","marginBottom","type","placeholder","value","onChange","target","required","display","width","cursor","length","map","key","id","border","likes","onClick","postId","handleLike","marginRight","marginTop","onKeyDown","_commentTexts$postId","trim","text","handleComment","comments","comment","index","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.da70c82c.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst API_URL = \"http://127.0.0.1:8000\"; // Ensure this matches your FastAPI backend URL\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [newPost, setNewPost] = useState({ user: \"\", content: \"\" });\n  const [commentTexts, setCommentTexts] = useState({}); // Store all comment inputs in an object\n\n  // Fetch posts from FastAPI when component loads\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  const fetchPosts = async () => {\n    try {\n      const response = await axios.get(`${API_URL}/posts`);\n      setPosts(response.data);\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n      alert(\"Failed to fetch posts. Check if backend is running.\");\n    }\n  };\n\n  // Handle adding a new post\n  const handlePostSubmit = async (e) => {\n    e.preventDefault();\n    if (!newPost.user || !newPost.content) {\n      alert(\"Fields cannot be empty!\");\n      return;\n    }\n    try {\n      await axios.post(`${API_URL}/posts`, newPost);\n      setNewPost({ user: \"\", content: \"\" }); // Reset form\n      fetchPosts(); // Refresh posts\n    } catch (error) {\n      console.error(\"Error adding post:\", error);\n      alert(\"Error adding post. Check backend logs.\");\n    }\n  };\n\n  // Handle Like Function\n  const handleLike = async (postId) => {\n    try {\n      await axios.post(`${API_URL}/posts/${postId}/like`);\n      fetchPosts();\n    } catch (error) {\n      console.error(\"Error liking post:\", error);\n      alert(\"Error liking post. Check backend logs.\");\n    }\n  };\n\n  // Handle Comment Function\n  const handleComment = async (postId) => {\n    if (!commentTexts[postId]?.trim()) return;\n    try {\n      await axios.post(`${API_URL}/posts/${postId}/comment`, {\n        user: \"Guest\",\n        text: commentTexts[postId],\n      });\n      setCommentTexts({ ...commentTexts, [postId]: \"\" }); // Clear input for this post\n      fetchPosts();\n    } catch (error) {\n      \n      console.error(\"Error adding comment:\", error);\n      alert(\"Error adding comment. Check backend logs.\");\n    }\n  };\n\n  return (\n    <div style={{ padding: \"20px\", maxWidth: \"600px\", margin: \"auto\" }}>\n      <h1>Social Media Platform</h1>\n\n      {/* New Post Form */}\n      <form onSubmit={handlePostSubmit} style={{ marginBottom: \"20px\" }}>\n        <input\n          type=\"text\"\n          placeholder=\"Your Name\"\n          value={newPost.user}\n          onChange={(e) => setNewPost({ ...newPost, user: e.target.value })}\n          required\n          style={{ display: \"block\", width: \"100%\", marginBottom: \"10px\", padding: \"8px\" }}\n        />\n        <textarea\n          placeholder=\"What's on your mind?\"\n          value={newPost.content}\n          onChange={(e) => setNewPost({ ...newPost, content: e.target.value })}\n          required\n          style={{ display: \"block\", width: \"100%\", marginBottom: \"10px\", padding: \"8px\" }}\n        ></textarea>\n        <button type=\"submit\" style={{ padding: \"10px 15px\", cursor: \"pointer\" }}>\n          Add Post\n        </button>\n      </form>\n\n      {/* Posts Section */}\n      {posts.length > 0 ? (\n        posts.map((post) => (\n          <div key={post.id} style={{ border: \"1px solid #ddd\", padding: \"10px\", marginBottom: \"10px\" }}>\n            <h3>{post.user}</h3>\n            <p>{post.content}</p>\n            <p>❤️ {post.likes} Likes</p>\n\n            {/* Like Button */}\n            <button onClick={() => handleLike(post.id)} style={{ marginRight: \"10px\", cursor: \"pointer\" }}>\n              Like\n            </button>\n\n            {/* Comment Section */}\n            <div style={{ marginTop: \"10px\" }}>\n              <input\n                type=\"text\"\n                placeholder=\"Write a comment...\"\n                value={commentTexts[post.id] || \"\"}\n                onChange={(e) =>\n                  setCommentTexts({ ...commentTexts, [post.id]: e.target.value })\n                }\n                onKeyDown={(e) => {\n                  if (e.key === \"Enter\") {\n                    handleComment(post.id);\n                  }\n                }}\n                style={{ width: \"80%\", padding: \"5px\" }}\n              />\n            </div>\n\n            {/* Display Comments */}\n            {post.comments && post.comments.length > 0 && (\n              <div style={{ marginTop: \"10px\" }}>\n                <h4>Comments:</h4>\n                {post.comments.map((comment, index) => (\n                  <p key={index} style={{ margin: \"5px 0\" }}>\n                    <strong>{comment.user}:</strong> {comment.text}\n                  </p>\n                ))}\n              </div>\n            )}\n          </div>\n        ))\n      ) : (\n        <p>No posts yet. Add a post above!</p>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}